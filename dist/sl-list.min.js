function Interface(e,t,n){"use strict";if(!arguments.length)throw new Error("Attempted to create Interface without a name.");t&&t.length||(t=[]),n&&n.length||(n=[]);var r,i,o=[];for(r=0,i=t.length;r<i;++r){if("string"!=typeof t[r])throw new Error("Interface<"+e+"> method<"+r+"> name is <"+typeof t[r]+">; expected string");o.push(t[r])}for(r=0,i=n.length;r<i;++r){if(!Interface.prototype.isPrototypeOf(n[r]))throw new Error("Interface<"+e+"> attempted to implement non-Interface interface");o=o.concat(n[r].methods)}Object.defineProperties(this,{name:{value:e},methods:{value:Object.freeze(o)}})}function Node(e){"use strict";this.value=e,NodeInterface.implementedBy(this)}function SinglyLinkedList(){"use strict";this.headNode=null,LinkedListInterface.implementedBy(this)}Interface.prototype={implementedBy:function(e){"use strict";for(var t=this.methods,n=0,r=t.length;n<r;++n)if("function"!=typeof e[t[n]])throw new Error("Interface<"+name+"> requires the method "+t[n]);return!0}},function(e){"use strict";var t=new Interface("NodeInterface",["setValue","getValue"]);e.NodeInterface=t}(this),function(e){"use strict";var t=new Interface("NodeInterface",["setNextNode","getNextNode"],[NodeInterface]);e.SinglyLinkedNodeInterface=t}(this),function(e){"use strict";var t=new Interface("LinkedListInterface",["getNode","createNode"],[ListInterface]);e.LinkedListInterface=t}(this),Node.prototype={getValue:function(){"use strict";return this.value},setValue:function(e){"use strict";return this.value=e,this}},function(e){"use strict";function t(e){Node.call(this,e),this.nextNode=null,t.implementedBy(this)}t.prototype=new Node(null),t.prototype.getNextNode=function(){return this.nextNode},t.prototype.setNextNode=function(e){return null!==e&&SinglyLinkedNodeInterface.implementedBy(e),this.nextNode=e,this},e.SinglyLinkedNode=t}(this),SinglyLinkedList.prototype={insert:function(e,t){"use strict";if(0===arguments.length)throw new Error("SinglyLinkedList.insert requires at least one argument");if(1===arguments.length&&(t=null),null!==t&&+t!=(0|+t))throw new Error("SinglyLinkedList.insert expects index to be integer, null, or undefined");var n=new SinglyLinkedNode(e);if(null===t&&null===this.headNode)return this.headNode=n,this;if(null===t)return this.getLastNode().setNextNode(n),this;if(0==+t)return n.setNextNode(this.headNode),this.headNode=n,this;var r=this.getNode(t-1);return n.setNextNode(r.getNextNode()),r.setNextNode(n),this},get:function(e){"use strict";if(0===arguments.length)throw new Error("SinglyLinkedList.get requires one argument");return this.getNode(e).getValue()},set:function(e,t){"use strict";if(2!==arguments.length)throw new Error("SinglyLinkedList.set expects two arguments");return this.getNode(e).setValue(t),this},remove:function(e,t){"use strict";if(0===arguments.length)throw new Error("SinglyLinkedList.remove requires 1 or 2 arguments");if(1===arguments.length&&(t=1),1>t)throw new Error("SinglyLinkedList.remove requires count parameter to be greater than 0");if(+t!=+t|0)throw new Error("SinglyLinkedList.remove expected count paramter to be an integer");var n=this.getNode(e+t-1).getNextNode();return 0==+e?(this.headNode=n,this):(this.getNode(e-1).setNextNode(n),this)},count:function(){"use strict";for(var e=this.headNode,t=0;e;)e=e.getNextNode(),++t;return t},getNode:function(e){"use strict";for(var t=this.headNode,n=0;n<e;++n)if(!(t=t.getNextNode()))throw new Error("Expected index to be within length of the list");return t},getLastNode:function(){"use strict";for(var e=this.headNode;e&&e.getNextNode();)e=e.getNextNode();return e}};